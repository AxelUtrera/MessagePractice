//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MessageServiceClient.MessageService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MessageService.User UserMessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateMessage {
            get {
                return this.DateMessageField;
            }
            set {
                if ((this.DateMessageField.Equals(value) != true)) {
                    this.DateMessageField = value;
                    this.RaisePropertyChanged("DateMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageData {
            get {
                return this.MessageDataField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageDataField, value) != true)) {
                    this.MessageDataField = value;
                    this.RaisePropertyChanged("MessageData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MessageService.User UserMessage {
            get {
                return this.UserMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.UserMessageField, value) != true)) {
                    this.UserMessageField = value;
                    this.RaisePropertyChanged("UserMessage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Service")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IpAddress {
            get {
                return this.IpAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IpAddressField, value) != true)) {
                    this.IpAddressField = value;
                    this.RaisePropertyChanged("IpAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageService.IMessageService")]
    public interface IMessageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/IncomingMessage", ReplyAction="http://tempuri.org/IMessageService/IncomingMessageResponse")]
        int IncomingMessage(MessageService.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/IncomingMessage", ReplyAction="http://tempuri.org/IMessageService/IncomingMessageResponse")]
        System.Threading.Tasks.Task<int> IncomingMessageAsync(MessageService.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/ConnectUser", ReplyAction="http://tempuri.org/IMessageService/ConnectUserResponse")]
        MessageService.User ConnectUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/ConnectUser", ReplyAction="http://tempuri.org/IMessageService/ConnectUserResponse")]
        System.Threading.Tasks.Task<MessageService.User> ConnectUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/GetNewMessages", ReplyAction="http://tempuri.org/IMessageService/GetNewMessagesResponse")]
        MessageService.Message[] GetNewMessages(MessageService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/GetNewMessages", ReplyAction="http://tempuri.org/IMessageService/GetNewMessagesResponse")]
        System.Threading.Tasks.Task<MessageService.Message[]> GetNewMessagesAsync(MessageService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/SendNewMessage", ReplyAction="http://tempuri.org/IMessageService/SendNewMessageResponse")]
        void SendNewMessage(MessageService.Message newMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/SendNewMessage", ReplyAction="http://tempuri.org/IMessageService/SendNewMessageResponse")]
        System.Threading.Tasks.Task SendNewMessageAsync(MessageService.Message newMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/GetAllUser", ReplyAction="http://tempuri.org/IMessageService/GetAllUserResponse")]
        MessageService.User[] GetAllUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/GetAllUser", ReplyAction="http://tempuri.org/IMessageService/GetAllUserResponse")]
        System.Threading.Tasks.Task<MessageService.User[]> GetAllUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/RemoveUser", ReplyAction="http://tempuri.org/IMessageService/RemoveUserResponse")]
        void RemoveUser(MessageService.User userToRemove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/RemoveUser", ReplyAction="http://tempuri.org/IMessageService/RemoveUserResponse")]
        System.Threading.Tasks.Task RemoveUserAsync(MessageService.User userToRemove);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageServiceChannel : MessageService.IMessageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessageServiceClient : System.ServiceModel.ClientBase<MessageService.IMessageService>, MessageService.IMessageService {
        
        public MessageServiceClient() {
        }
        
        public MessageServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MessageServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MessageServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MessageServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int IncomingMessage(MessageService.Message message) {
            return base.Channel.IncomingMessage(message);
        }
        
        public System.Threading.Tasks.Task<int> IncomingMessageAsync(MessageService.Message message) {
            return base.Channel.IncomingMessageAsync(message);
        }
        
        public MessageService.User ConnectUser(string username) {
            return base.Channel.ConnectUser(username);
        }
        
        public System.Threading.Tasks.Task<MessageService.User> ConnectUserAsync(string username) {
            return base.Channel.ConnectUserAsync(username);
        }
        
        public MessageService.Message[] GetNewMessages(MessageService.User user) {
            return base.Channel.GetNewMessages(user);
        }
        
        public System.Threading.Tasks.Task<MessageService.Message[]> GetNewMessagesAsync(MessageService.User user) {
            return base.Channel.GetNewMessagesAsync(user);
        }
        
        public void SendNewMessage(MessageService.Message newMessage) {
            base.Channel.SendNewMessage(newMessage);
        }
        
        public System.Threading.Tasks.Task SendNewMessageAsync(MessageService.Message newMessage) {
            return base.Channel.SendNewMessageAsync(newMessage);
        }
        
        public MessageService.User[] GetAllUser() {
            return base.Channel.GetAllUser();
        }
        
        public System.Threading.Tasks.Task<MessageService.User[]> GetAllUserAsync() {
            return base.Channel.GetAllUserAsync();
        }
        
        public void RemoveUser(MessageService.User userToRemove) {
            base.Channel.RemoveUser(userToRemove);
        }
        
        public System.Threading.Tasks.Task RemoveUserAsync(MessageService.User userToRemove) {
            return base.Channel.RemoveUserAsync(userToRemove);
        }
    }
}
